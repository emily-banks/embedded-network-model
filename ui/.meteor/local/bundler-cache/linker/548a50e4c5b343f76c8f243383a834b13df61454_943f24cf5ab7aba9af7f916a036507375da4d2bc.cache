[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nHTTP = Package.http.HTTP;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package['templating-runtime'].Template;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\nSymbol = Package['ecmascript-runtime-client'].Symbol;\nMap = Package['ecmascript-runtime-client'].Map;\nSet = Package['ecmascript-runtime-client'].Set;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"main.html\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// client/main.html                                                                                             //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = require(\"./template.main.js\");                                                                 // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.main.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// client/template.main.js                                                                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n                                                                                                                // 1\nTemplate.body.addContent((function() {                                                                          // 2\n  var view = this;                                                                                              // 3\n  return [ HTML.Raw(\"<h1>Embedded Network Model</h1>\\n\\n    \"), HTML.DIV({                                      // 4\n    class: \"page-content\"                                                                                       // 5\n  }, \"\\n      \", HTML.DIV({                                                                                     // 6\n    class: \"sidebar\"                                                                                            // 7\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"hello\")), \"\\n\\n\\n      \"), \"\\n\\n      \", HTML.DIV({\n    class: \"input-output\"                                                                                       // 9\n  }, \" \\n         \", Spacebars.include(view.lookupTemplate(\"participants\")), \"\\n         \", Spacebars.include(view.lookupTemplate(\"graph\")), \"\\n      \"), \"\\n    \") ];\n}));                                                                                                            // 11\nMeteor.startup(Template.body.renderToDocument);                                                                 // 12\n                                                                                                                // 13\nTemplate.__checkName(\"hello\");                                                                                  // 14\nTemplate[\"hello\"] = new Template(\"Template.hello\", (function() {                                                // 15\n  var view = this;                                                                                              // 16\n  return [ HTML.Raw(\"<!-- <form class='add_participant'> -->\\n    \"), HTML.DIV({                                // 17\n    class: \"add-participant-form\"                                                                               // 18\n  }, \"\\n\\n      \", HTML.Raw('<div class=\"participant-form-item\">\\n        Identification number <input type=\"test\" name=\"id_num\" id=\"id_num\" placeholder=\"1\" value=\"1\">\\n      </div>'), \"\\n      \", HTML.Raw('<div class=\"participant-form-item\">\\n        Participant name <input type=\"text\" name=\"participant_name\" id=\"participant_name\" placeholder=\"Fred\" value=\"Fred\">\\n      </div>'), \"\\n      \", HTML.Raw('<div class=\"participant-form-item\">\\n       Solar capacity (kW) <input type=\"text\" name=\"solar_capacity\" id=\"solar_capacity\" placeholder=\"4\" value=\"4\">\\n      </div>'), \"\\n      \", HTML.Raw('<div class=\"participant-form-item\">\\n       Battery export limit (kW) <input type=\"text\" name=\"battery_export_limit\" id=\"battery_export_limit\" placeholder=\"4\" value=\"4\">\\n      </div>'), \"\\n      \", HTML.Raw('<div class=\"participant-form-item\">\\n        Battery capacity (kWh) <input type=\"text\" name=\"battery_capacity\" id=\"battery_capacity\" placeholder=\"4\" value=\"4\">\\n      </div>'), \"\\n      \", HTML.Raw('<div class=\"participant-form-item\">\\n       Enova customer? (Y/N) <input type=\"test\" name=\"enova_customer_flag\" id=\"enova_customer_flag\" placeholder=\"Y\" value=\"Y\">\\n      </div>'), \"\\n      \", HTML.DIV({\n    class: \"participant-form-item\"                                                                              // 20\n  }, \"\\n        \", HTML.SELECT({                                                                                // 21\n    name: \"retail-tariff-selector\",                                                                             // 22\n    id: \"retail-tariff-selector\",                                                                               // 23\n    class: \"form-control\",                                                                                      // 24\n    value: function() {                                                                                         // 25\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"retail_tariffs\"), \"0\"));                             // 26\n    }                                                                                                           // 27\n  }, \"\\n        \", Blaze.Each(function() {                                                                      // 28\n    return {                                                                                                    // 29\n      _sequence: Spacebars.call(view.lookup(\"retail_tariffs\")),                                                 // 30\n      _variable: \"tariff\"                                                                                       // 31\n    };                                                                                                          // 32\n  }, function() {                                                                                               // 33\n    return [ \"\\n          \", HTML.OPTION({                                                                      // 34\n      value: function() {                                                                                       // 35\n        return Spacebars.mustache(view.lookup(\"tariff\"));                                                       // 36\n      }                                                                                                         // 37\n    }, Blaze.View(\"lookup:tariff\", function() {                                                                 // 38\n      return Spacebars.mustache(view.lookup(\"tariff\"));                                                         // 39\n    })), \"\\n        \" ];                                                                                        // 40\n  }), \"\\n        \"), \"\\n\\n       \", HTML.Raw(\"<!-- Retail tariff <input type='test' name='retail_tariff' id='retail_tariff' placeholder=\\\"Enova flat commercial\\\" value=\\\"Enova flat commercial\\\"> -->\"), \"\\n      \"), \"\\n      \", HTML.DIV({\n    class: \"participant-form-item\"                                                                              // 42\n  }, \"\\n          \", HTML.SELECT({                                                                              // 43\n    name: \"network-tariff-selector\",                                                                            // 44\n    class: \"form-control\",                                                                                      // 45\n    value: function() {                                                                                         // 46\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"network_tariffs\"), \"0\"));                            // 47\n    }                                                                                                           // 48\n  }, \"\\n          \", Blaze.Each(function() {                                                                    // 49\n    return {                                                                                                    // 50\n      _sequence: Spacebars.call(view.lookup(\"network_tariffs\")),                                                // 51\n      _variable: \"tariff\"                                                                                       // 52\n    };                                                                                                          // 53\n  }, function() {                                                                                               // 54\n    return [ \"\\n            \", HTML.OPTION({                                                                    // 55\n      value: function() {                                                                                       // 56\n        return Spacebars.mustache(view.lookup(\"tariff\"));                                                       // 57\n      }                                                                                                         // 58\n    }, Blaze.View(\"lookup:tariff\", function() {                                                                 // 59\n      return Spacebars.mustache(view.lookup(\"tariff\"));                                                         // 60\n    })), \"\\n          \" ];                                                                                      // 61\n  }), \"\\n          \"), \"\\n        \"), \"\\n      \", HTML.Raw('<div class=\"participant-form-item\">\\n       <button type=\"submit\">Add participant</button>\\n      </div>'), \"\\n\\n      \", HTML.Raw('<div class=\"btn btn-success\" id=\"run-simulation\">Run Simulation</div>'), \"\\n    \"), HTML.Raw(\"\\n  <!-- </form> -->\") ];\n}));                                                                                                            // 63\n                                                                                                                // 64\nTemplate.__checkName(\"participants\");                                                                           // 65\nTemplate[\"participants\"] = new Template(\"Template.participants\", (function() {                                  // 66\n  var view = this;                                                                                              // 67\n  return HTML.DIV({                                                                                             // 68\n    class: \"participant_table\"                                                                                  // 69\n  }, HTML.Raw(\"\\n    <h2>Participants</h2>\\n    \"), HTML.TABLE({                                                // 70\n    style: \"width:100%\",                                                                                        // 71\n    class: \"participant_table_table\"                                                                            // 72\n  }, \"\\n        \", HTML.TR(\"\\n            \", HTML.TH(\"Participant id number\"), \"\\n            \", HTML.TH(\"Name:\"), \" \\n            \", HTML.TH(\"Solar capacity\"), \"\\n            \", HTML.TH(\"Battery export limit (kW)\"), \"\\n            \", HTML.TH(\"Battery capacity\"), \"\\n            \", HTML.TH(\" Enova customer? (Y/N)\"), \"\\n            \", HTML.TH(\" Retail tariff\"), \"\\n            \", HTML.TH(\" Network tariff\"), \"\\n          \"), \"\\n            \", Blaze.Each(function() {\n    return {                                                                                                    // 74\n      _sequence: Spacebars.call(view.lookup(\"participants\")),                                                   // 75\n      _variable: \"participant\"                                                                                  // 76\n    };                                                                                                          // 77\n  }, function() {                                                                                               // 78\n    return [ \"\\n            \", HTML.TR(\"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.id_num\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"id_num\"));                           // 80\n    })), \"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.name\", function() {                         // 81\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"name\"));                             // 82\n    })), \"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.solar_capacity\", function() {               // 83\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"solar_capacity\"));                   // 84\n    })), \"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.battery_export_limit\", function() {         // 85\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"battery_export_limit\"));             // 86\n    })), \"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.battery_capacity\", function() {             // 87\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"battery_capacity\"));                 // 88\n    })), \"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.enova_customer_flag\", function() {          // 89\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"enova_customer_flag\"));              // 90\n    })), \"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.retail_tariff\", function() {                // 91\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"retail_tariff\"));                    // 92\n    })), \"\\n              \", HTML.TD(Blaze.View(\"lookup:participant.network_tariff\", function() {               // 93\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"participant\"), \"network_tariff\"));                   // 94\n    })), \"\\n            \"), \"\\n             \" ];                                                                // 95\n  }), \"\\n    \"), \"\\n\\n  \");                                                                                     // 96\n}));                                                                                                            // 97\n                                                                                                                // 98\nTemplate.__checkName(\"graph\");                                                                                  // 99\nTemplate[\"graph\"] = new Template(\"Template.graph\", (function() {                                                // 100\n  var view = this;                                                                                              // 101\n  return HTML.Raw('<div id=\"content\" class=\"graph-content\">\\n    \\n      <form id=\"side_panel\">\\n        <h2>Energy Flow</h2>\\n        <section><div id=\"legend\"></div></section>\\n        <section>\\n          <div id=\"renderer_form\" class=\"toggler\">\\n            <input type=\"radio\" name=\"renderer\" id=\"area\" value=\"area\" checked=\"\">\\n            <label for=\"area\">area</label>\\n            <input type=\"radio\" name=\"renderer\" id=\"bar\" value=\"bar\">\\n            <label for=\"bar\">bar</label>\\n            <input type=\"radio\" name=\"renderer\" id=\"line\" value=\"line\">\\n            <label for=\"line\">line</label>\\n            <input type=\"radio\" name=\"renderer\" id=\"scatter\" value=\"scatterplot\">\\n            <label for=\"scatter\">scatter</label>\\n          </div>\\n        </section>\\n        <section>\\n          <div id=\"offset_form\">\\n            <label for=\"stack\">\\n              <input type=\"radio\" name=\"offset\" id=\"stack\" value=\"zero\" checked=\"\">\\n              <span>stack</span>\\n            </label>\\n            <label for=\"stream\">\\n              <input type=\"radio\" name=\"offset\" id=\"stream\" value=\"wiggle\">\\n              <span>stream</span>\\n            </label>\\n            <label for=\"pct\">\\n              <input type=\"radio\" name=\"offset\" id=\"pct\" value=\"expand\">\\n              <span>pct</span>\\n            </label>\\n            <label for=\"value\">\\n              <input type=\"radio\" name=\"offset\" id=\"value\" value=\"value\">\\n              <span>value</span>\\n            </label>\\n          </div>\\n          <div id=\"interpolation_form\">\\n            <label for=\"cardinal\">\\n              <input type=\"radio\" name=\"interpolation\" id=\"cardinal\" value=\"cardinal\" checked=\"\">\\n              <span>cardinal</span>\\n            </label>\\n            <label for=\"linear\">\\n              <input type=\"radio\" name=\"interpolation\" id=\"linear\" value=\"linear\">\\n              <span>linear</span>\\n            </label>\\n            <label for=\"step\">\\n              <input type=\"radio\" name=\"interpolation\" id=\"step\" value=\"step-after\">\\n              <span>step</span>\\n            </label>\\n          </div>\\n        </section>\\n        <section>\\n          <h6>Smoothing</h6>\\n          <div id=\"smoother\"></div>\\n        </section>\\n        <section></section>\\n      </form>\\n    \\n      <div id=\"chart_container\">\\n        <div id=\"chart\"></div>\\n        <div id=\"timeline\"></div>\\n        <div id=\"preview\"></div>\\n      </div>\\n    \\n    </div>');\n}));                                                                                                            // 103\n                                                                                                                // 104\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// client/main.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar Template = void 0;                                                                                          // 1\nmodule.watch(require(\"meteor/templating\"), {                                                                    // 1\n    Template: function (v) {                                                                                    // 1\n        Template = v;                                                                                           // 1\n    }                                                                                                           // 1\n}, 0);                                                                                                          // 1\nvar ReactiveVar = void 0;                                                                                       // 1\nmodule.watch(require(\"meteor/reactive-var\"), {                                                                  // 1\n    ReactiveVar: function (v) {                                                                                 // 1\n        ReactiveVar = v;                                                                                        // 1\n    }                                                                                                           // 1\n}, 1);                                                                                                          // 1\nmodule.watch(require(\"./main.html\"));                                                                           // 1\nTemplate.hello.onCreated(function () {                                                                          // 6\n    function helloOnCreated() {                                                                                 // 6\n        // counter starts at 0                                                                                  // 7\n        this.counter = new ReactiveVar(0);                                                                      // 8\n        Session.set(\"participants\", []);                                                                        // 9\n    }                                                                                                           // 10\n                                                                                                                //\n    return helloOnCreated;                                                                                      // 6\n}());                                                                                                           // 6\nTemplate.hello.helpers({                                                                                        // 14\n    counter: function () {                                                                                      // 15\n        return Template.instance().counter.get();                                                               // 16\n    },                                                                                                          // 17\n    retail_tariffs: function () {                                                                               // 18\n        return ['Retail Tariff 1', 'Retail Tariff 2', 'Retail Tariff 3'];                                       // 19\n    },                                                                                                          // 20\n    network_tariffs: function () {                                                                              // 21\n        return ['Network Tariff 1', 'Network Tariff 2', 'Network Tariff 3'];                                    // 22\n    }                                                                                                           // 23\n});                                                                                                             // 14\nTemplate.participants.helpers({                                                                                 // 27\n    participants: function () {                                                                                 // 28\n        var participants = Session.get(\"participants\");                                                         // 29\n        return participants;                                                                                    // 30\n    }                                                                                                           // 31\n});                                                                                                             // 27\nTemplate.hello.events({                                                                                         // 34\n    'click button': function (event, instance) {                                                                // 35\n        console.log('Clicked the button!'); // increment the counter when button is clicked                     // 36\n                                                                                                                //\n        var id_num = $('#id_num').val();                                                                        // 38\n        var name = $('#participant_name').val();                                                                // 39\n        var solar_capacity = $('#solar_capacity').val();                                                        // 40\n        var battery_export_limit = $('#battery_export_limit').val();                                            // 41\n        var battery_capacity = $('#battery_capacity').val();                                                    // 42\n        var enova_customer_flag = $('#enova_customer_flag').val();                                              // 43\n        var retail_tariff = $('[name=retail_tariff_selector]').val(); // retail_tariff = tmpl.find('#retail_tariff_selector :selected');\n        // console.log(battery_capacity)                                                                        // 49\n                                                                                                                //\n        instance.counter.set(instance.counter.get() + 1);                                                       // 50\n        var participants = Session.get(\"participants\");                                                         // 51\n        participants.push({                                                                                     // 53\n            id_num: id_num,                                                                                     // 54\n            name: name,                                                                                         // 55\n            solar_capacity: solar_capacity,                                                                     // 56\n            battery_export_limit: battery_export_limit,                                                         // 57\n            battery_capacity: battery_capacity,                                                                 // 58\n            enova_customer_flag: enova_customer_flag,                                                           // 59\n            retail_tariff: retail_tariff                                                                        // 60\n        });                                                                                                     // 53\n        Session.set(\"participants\", participants);                                                              // 62\n    },                                                                                                          // 63\n    'click #run-simulation': function (event, instance) {                                                       // 65\n        console.log('Running Simulation');                                                                      // 66\n        Meteor.call('runSimulation', function (error, res) {                                                    // 67\n            console.log(res);                                                                                   // 68\n            console.log(JSON.parse(res));                                                                       // 69\n        });                                                                                                     // 70\n    }                                                                                                           // 71\n});                                                                                                             // 34\nTemplate.graph.onRendered(function () {                                                                         // 75\n    console.log('graph rendered!');                                                                             // 76\n                                                                                                                //\n    var RenderControls = function (args) {                                                                      // 78\n        var $ = jQuery;                                                                                         // 80\n                                                                                                                //\n        this.initialize = function () {                                                                         // 82\n            this.element = args.element;                                                                        // 84\n            this.graph = args.graph;                                                                            // 85\n            this.settings = this.serialize();                                                                   // 86\n            this.inputs = {                                                                                     // 88\n                renderer: this.element.elements.renderer,                                                       // 89\n                interpolation: this.element.elements.interpolation,                                             // 90\n                offset: this.element.elements.offset                                                            // 91\n            };                                                                                                  // 88\n            this.element.addEventListener('change', function (e) {                                              // 94\n                this.settings = this.serialize();                                                               // 96\n                                                                                                                //\n                if (e.target.name == 'renderer') {                                                              // 98\n                    this.setDefaultOffset(e.target.value);                                                      // 99\n                }                                                                                               // 100\n                                                                                                                //\n                this.syncOptions();                                                                             // 102\n                this.settings = this.serialize();                                                               // 103\n                var config = {                                                                                  // 105\n                    renderer: this.settings.renderer,                                                           // 106\n                    interpolation: this.settings.interpolation                                                  // 107\n                };                                                                                              // 105\n                                                                                                                //\n                if (this.settings.offset == 'value') {                                                          // 110\n                    config.unstack = true;                                                                      // 111\n                    config.offset = 'zero';                                                                     // 112\n                } else if (this.settings.offset == 'expand') {                                                  // 113\n                    config.unstack = false;                                                                     // 114\n                    config.offset = this.settings.offset;                                                       // 115\n                } else {                                                                                        // 116\n                    config.unstack = false;                                                                     // 117\n                    config.offset = this.settings.offset;                                                       // 118\n                }                                                                                               // 119\n                                                                                                                //\n                this.graph.configure(config);                                                                   // 121\n                this.graph.render();                                                                            // 122\n            }.bind(this), false);                                                                               // 124\n        };                                                                                                      // 125\n                                                                                                                //\n        this.serialize = function () {                                                                          // 127\n            var values = {};                                                                                    // 129\n            var pairs = $(this.element).serializeArray();                                                       // 130\n            pairs.forEach(function (pair) {                                                                     // 132\n                values[pair.name] = pair.value;                                                                 // 133\n            });                                                                                                 // 134\n            return values;                                                                                      // 136\n        };                                                                                                      // 137\n                                                                                                                //\n        this.syncOptions = function () {                                                                        // 139\n            var options = this.rendererOptions[this.settings.renderer];                                         // 141\n            Array.prototype.forEach.call(this.inputs.interpolation, function (input) {                          // 143\n                if (options.interpolation) {                                                                    // 145\n                    input.disabled = false;                                                                     // 146\n                    input.parentNode.classList.remove('disabled');                                              // 147\n                } else {                                                                                        // 148\n                    input.disabled = true;                                                                      // 149\n                    input.parentNode.classList.add('disabled');                                                 // 150\n                }                                                                                               // 151\n            });                                                                                                 // 152\n            Array.prototype.forEach.call(this.inputs.offset, function (input) {                                 // 154\n                if (options.offset.filter(function (o) {                                                        // 156\n                    return o == input.value;                                                                    // 156\n                }).length) {                                                                                    // 156\n                    input.disabled = false;                                                                     // 157\n                    input.parentNode.classList.remove('disabled');                                              // 158\n                } else {                                                                                        // 160\n                    input.disabled = true;                                                                      // 161\n                    input.parentNode.classList.add('disabled');                                                 // 162\n                }                                                                                               // 163\n            }.bind(this));                                                                                      // 165\n        };                                                                                                      // 167\n                                                                                                                //\n        this.setDefaultOffset = function (renderer) {                                                           // 169\n            var options = this.rendererOptions[renderer];                                                       // 171\n                                                                                                                //\n            if (options.defaults && options.defaults.offset) {                                                  // 173\n                Array.prototype.forEach.call(this.inputs.offset, function (input) {                             // 175\n                    if (input.value == options.defaults.offset) {                                               // 176\n                        input.checked = true;                                                                   // 177\n                    } else {                                                                                    // 178\n                        input.checked = false;                                                                  // 179\n                    }                                                                                           // 180\n                }.bind(this));                                                                                  // 182\n            }                                                                                                   // 183\n        };                                                                                                      // 184\n                                                                                                                //\n        this.rendererOptions = {                                                                                // 186\n            area: {                                                                                             // 188\n                interpolation: true,                                                                            // 189\n                offset: ['zero', 'wiggle', 'expand', 'value'],                                                  // 190\n                defaults: {                                                                                     // 191\n                    offset: 'zero'                                                                              // 191\n                }                                                                                               // 191\n            },                                                                                                  // 188\n            line: {                                                                                             // 193\n                interpolation: true,                                                                            // 194\n                offset: ['expand', 'value'],                                                                    // 195\n                defaults: {                                                                                     // 196\n                    offset: 'value'                                                                             // 196\n                }                                                                                               // 196\n            },                                                                                                  // 193\n            bar: {                                                                                              // 198\n                interpolation: false,                                                                           // 199\n                offset: ['zero', 'wiggle', 'expand', 'value'],                                                  // 200\n                defaults: {                                                                                     // 201\n                    offset: 'zero'                                                                              // 201\n                }                                                                                               // 201\n            },                                                                                                  // 198\n            scatterplot: {                                                                                      // 203\n                interpolation: false,                                                                           // 204\n                offset: ['value'],                                                                              // 205\n                defaults: {                                                                                     // 206\n                    offset: 'value'                                                                             // 206\n                }                                                                                               // 206\n            }                                                                                                   // 203\n        };                                                                                                      // 186\n        this.initialize();                                                                                      // 210\n    }; // set up our data series with 150 random data points                                                    // 211\n                                                                                                                //\n                                                                                                                //\n    var seriesData = [[], [], [], [], [], [], [], [], []];                                                      // 217\n    var random = new Rickshaw.Fixtures.RandomData(150);                                                         // 228\n                                                                                                                //\n    for (var i = 0; i < 150; i++) {                                                                             // 230\n        random.addData(seriesData);                                                                             // 231\n    }                                                                                                           // 232\n                                                                                                                //\n    var palette = new Rickshaw.Color.Palette({                                                                  // 234\n        scheme: 'classic9'                                                                                      // 234\n    }); // instantiate our graph!                                                                               // 234\n                                                                                                                //\n    var graph = new Rickshaw.Graph({                                                                            // 238\n        element: document.getElementById(\"chart\"),                                                              // 239\n        width: 900,                                                                                             // 240\n        height: 500,                                                                                            // 241\n        renderer: 'area',                                                                                       // 242\n        stroke: true,                                                                                           // 243\n        preserve: true,                                                                                         // 244\n        series: [{                                                                                              // 245\n            color: palette.color(),                                                                             // 246\n            data: seriesData[0],                                                                                // 247\n            name: 'Moscow'                                                                                      // 248\n        }, {                                                                                                    // 245\n            color: palette.color(),                                                                             // 250\n            data: seriesData[1],                                                                                // 251\n            name: 'Shanghai'                                                                                    // 252\n        }, {                                                                                                    // 249\n            color: palette.color(),                                                                             // 254\n            data: seriesData[2],                                                                                // 255\n            name: 'Amsterdam'                                                                                   // 256\n        }, {                                                                                                    // 253\n            color: palette.color(),                                                                             // 258\n            data: seriesData[3],                                                                                // 259\n            name: 'Paris'                                                                                       // 260\n        }, {                                                                                                    // 257\n            color: palette.color(),                                                                             // 262\n            data: seriesData[4],                                                                                // 263\n            name: 'Tokyo'                                                                                       // 264\n        }, {                                                                                                    // 261\n            color: palette.color(),                                                                             // 266\n            data: seriesData[5],                                                                                // 267\n            name: 'London'                                                                                      // 268\n        }, {                                                                                                    // 265\n            color: palette.color(),                                                                             // 270\n            data: seriesData[6],                                                                                // 271\n            name: 'New York'                                                                                    // 272\n        }]                                                                                                      // 269\n    });                                                                                                         // 238\n    graph.render();                                                                                             // 276\n    var preview = new Rickshaw.Graph.RangeSlider.Preview({                                                      // 278\n        graph: graph,                                                                                           // 279\n        element: document.getElementById('preview')                                                             // 280\n    });                                                                                                         // 278\n    var hoverDetail = new Rickshaw.Graph.HoverDetail({                                                          // 283\n        graph: graph,                                                                                           // 284\n        xFormatter: function (x) {                                                                              // 285\n            return new Date(x * 1000).toString();                                                               // 286\n        }                                                                                                       // 287\n    });                                                                                                         // 283\n    var annotator = new Rickshaw.Graph.Annotate({                                                               // 290\n        graph: graph,                                                                                           // 291\n        element: document.getElementById('timeline')                                                            // 292\n    });                                                                                                         // 290\n    var legend = new Rickshaw.Graph.Legend({                                                                    // 295\n        graph: graph,                                                                                           // 296\n        element: document.getElementById('legend')                                                              // 297\n    });                                                                                                         // 295\n    var shelving = new Rickshaw.Graph.Behavior.Series.Toggle({                                                  // 301\n        graph: graph,                                                                                           // 302\n        legend: legend                                                                                          // 303\n    });                                                                                                         // 301\n    var order = new Rickshaw.Graph.Behavior.Series.Order({                                                      // 306\n        graph: graph,                                                                                           // 307\n        legend: legend                                                                                          // 308\n    });                                                                                                         // 306\n    var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight({                                            // 311\n        graph: graph,                                                                                           // 312\n        legend: legend                                                                                          // 313\n    });                                                                                                         // 311\n    var smoother = new Rickshaw.Graph.Smoother({                                                                // 316\n        graph: graph,                                                                                           // 317\n        element: document.querySelector('#smoother')                                                            // 318\n    });                                                                                                         // 316\n    var ticksTreatment = 'glow';                                                                                // 321\n    var xAxis = new Rickshaw.Graph.Axis.Time({                                                                  // 323\n        graph: graph,                                                                                           // 324\n        ticksTreatment: ticksTreatment,                                                                         // 325\n        timeFixture: new Rickshaw.Fixtures.Time.Local()                                                         // 326\n    });                                                                                                         // 323\n    xAxis.render();                                                                                             // 329\n    var yAxis = new Rickshaw.Graph.Axis.Y({                                                                     // 331\n        graph: graph,                                                                                           // 332\n        tickFormat: Rickshaw.Fixtures.Number.formatKMBT,                                                        // 333\n        ticksTreatment: ticksTreatment                                                                          // 334\n    });                                                                                                         // 331\n    yAxis.render();                                                                                             // 337\n    var controls = new RenderControls({                                                                         // 340\n        element: document.querySelector('form'),                                                                // 341\n        graph: graph                                                                                            // 342\n    }); // add some data every so often                                                                         // 340\n                                                                                                                //\n    var messages = [\"Changed home page welcome message\", \"Minified JS and CSS\", \"Changed button color from blue to green\", \"Refactored SQL query to use indexed columns\", \"Added additional logging for debugging\", \"Fixed typo\", \"Rewrite conditional logic for clarity\", \"Added documentation for new methods\"];\n    setInterval(function () {                                                                                   // 358\n        random.removeData(seriesData);                                                                          // 359\n        random.addData(seriesData);                                                                             // 360\n        graph.update();                                                                                         // 361\n    }, 3000);                                                                                                   // 363\n                                                                                                                //\n    function addAnnotation(force) {                                                                             // 365\n        if (messages.length > 0 && (force || Math.random() >= 0.95)) {                                          // 366\n            annotator.add(seriesData[2][seriesData[2].length - 1].x, messages.shift());                         // 367\n            annotator.update();                                                                                 // 368\n        }                                                                                                       // 369\n    }                                                                                                           // 370\n                                                                                                                //\n    addAnnotation(true);                                                                                        // 372\n    setTimeout(function () {                                                                                    // 373\n        setInterval(addAnnotation, 6000);                                                                       // 373\n    }, 6000);                                                                                                   // 373\n    console.log(preview);                                                                                       // 375\n    var previewXAxis = new Rickshaw.Graph.Axis.Time({                                                           // 376\n        graph: preview.previews[0],                                                                             // 377\n        timeFixture: new Rickshaw.Fixtures.Time.Local(),                                                        // 378\n        ticksTreatment: ticksTreatment                                                                          // 379\n    });                                                                                                         // 376\n    previewXAxis.render();                                                                                      // 382\n});                                                                                                             // 383\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".css\"\n  ]\n});\nrequire(\"./client/template.main.js\");\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["client/main.js"],"names":["Template","module","watch","require","v","ReactiveVar","hello","onCreated","helloOnCreated","counter","Session","set","helpers","instance","get","retail_tariffs","network_tariffs","participants","events","event","console","log","id_num","$","val","name","solar_capacity","battery_export_limit","battery_capacity","enova_customer_flag","retail_tariff","push","Meteor","call","error","res","JSON","parse","graph","onRendered","RenderControls","args","jQuery","initialize","element","settings","serialize","inputs","renderer","elements","interpolation","offset","addEventListener","e","target","setDefaultOffset","value","syncOptions","config","unstack","configure","render","bind","values","pairs","serializeArray","forEach","pair","options","rendererOptions","Array","prototype","input","disabled","parentNode","classList","remove","add","filter","o","length","defaults","checked","area","line","bar","scatterplot","seriesData","random","Rickshaw","Fixtures","RandomData","i","addData","palette","Color","Palette","scheme","Graph","document","getElementById","width","height","stroke","preserve","series","color","data","preview","RangeSlider","Preview","hoverDetail","HoverDetail","xFormatter","x","Date","toString","annotator","Annotate","legend","Legend","shelving","Behavior","Series","Toggle","order","Order","highlighter","Highlight","smoother","Smoother","querySelector","ticksTreatment","xAxis","Axis","Time","timeFixture","Local","yAxis","Y","tickFormat","Number","formatKMBT","controls","messages","setInterval","removeData","update","addAnnotation","force","Math","shift","setTimeout","previewXAxis","previews"],"mappings":"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","file":"/app.js","sourcesContent":["import { Template } from 'meteor/templating';\r\nimport { ReactiveVar } from 'meteor/reactive-var';\r\n\r\nimport './main.html';\r\n\r\nTemplate.hello.onCreated(function helloOnCreated() {\r\n    // counter starts at 0\r\n    this.counter = new ReactiveVar(0);\r\n    Session.set(\"participants\", []);\r\n});\r\n\r\n\r\n\r\nTemplate.hello.helpers({\r\n    counter() {\r\n        return Template.instance().counter.get();\r\n    },\r\n    retail_tariffs() {\r\n        return ['Retail Tariff 1', 'Retail Tariff 2', 'Retail Tariff 3'];\r\n    },\r\n    network_tariffs() {\r\n        return ['Network Tariff 1', 'Network Tariff 2', 'Network Tariff 3'];\r\n    }\r\n\r\n});\r\n\r\nTemplate.participants.helpers({\r\n    participants() {\r\n        var participants = Session.get(\"participants\");\r\n        return participants;\r\n    },\r\n});\r\n\r\nTemplate.hello.events({\r\n    'click button' (event, instance) {\r\n        console.log('Clicked the button!')\r\n            // increment the counter when button is clicked\r\n        var id_num = $('#id_num').val();\r\n        var name = $('#participant_name').val();\r\n        var solar_capacity = $('#solar_capacity').val();\r\n        var battery_export_limit = $('#battery_export_limit').val();\r\n        var battery_capacity = $('#battery_capacity').val();\r\n        var enova_customer_flag = $('#enova_customer_flag').val();\r\n        var retail_tariff = $('[name=retail_tariff_selector]').val();\r\n\r\n        // retail_tariff = tmpl.find('#retail_tariff_selector :selected');\r\n\r\n\r\n        // console.log(battery_capacity)\r\n        instance.counter.set(instance.counter.get() + 1);\r\n        var participants = Session.get(\"participants\");\r\n\r\n        participants.push({\r\n            id_num: id_num,\r\n            name: name,\r\n            solar_capacity: solar_capacity,\r\n            battery_export_limit: battery_export_limit,\r\n            battery_capacity: battery_capacity,\r\n            enova_customer_flag: enova_customer_flag,\r\n            retail_tariff: retail_tariff\r\n        });\r\n        Session.set(\"participants\", participants);\r\n    },\r\n\r\n    'click #run-simulation' (event, instance) {\r\n        console.log('Running Simulation')\r\n        Meteor.call('runSimulation', function(error, res) {\r\n            console.log(res);\r\n            console.log(JSON.parse(res))\r\n        });\r\n    }\r\n});\r\n\r\n\r\nTemplate.graph.onRendered(function() {\r\n    console.log('graph rendered!');\r\n\r\n    var RenderControls = function(args) {\r\n\r\n        var $ = jQuery;\r\n\r\n        this.initialize = function() {\r\n\r\n            this.element = args.element;\r\n            this.graph = args.graph;\r\n            this.settings = this.serialize();\r\n\r\n            this.inputs = {\r\n                renderer: this.element.elements.renderer,\r\n                interpolation: this.element.elements.interpolation,\r\n                offset: this.element.elements.offset\r\n            };\r\n\r\n            this.element.addEventListener('change', function(e) {\r\n\r\n                this.settings = this.serialize();\r\n\r\n                if (e.target.name == 'renderer') {\r\n                    this.setDefaultOffset(e.target.value);\r\n                }\r\n\r\n                this.syncOptions();\r\n                this.settings = this.serialize();\r\n\r\n                var config = {\r\n                    renderer: this.settings.renderer,\r\n                    interpolation: this.settings.interpolation\r\n                };\r\n\r\n                if (this.settings.offset == 'value') {\r\n                    config.unstack = true;\r\n                    config.offset = 'zero';\r\n                } else if (this.settings.offset == 'expand') {\r\n                    config.unstack = false;\r\n                    config.offset = this.settings.offset;\r\n                } else {\r\n                    config.unstack = false;\r\n                    config.offset = this.settings.offset;\r\n                }\r\n\r\n                this.graph.configure(config);\r\n                this.graph.render();\r\n\r\n            }.bind(this), false);\r\n        }\r\n\r\n        this.serialize = function() {\r\n\r\n            var values = {};\r\n            var pairs = $(this.element).serializeArray();\r\n\r\n            pairs.forEach(function(pair) {\r\n                values[pair.name] = pair.value;\r\n            });\r\n\r\n            return values;\r\n        };\r\n\r\n        this.syncOptions = function() {\r\n\r\n            var options = this.rendererOptions[this.settings.renderer];\r\n\r\n            Array.prototype.forEach.call(this.inputs.interpolation, function(input) {\r\n\r\n                if (options.interpolation) {\r\n                    input.disabled = false;\r\n                    input.parentNode.classList.remove('disabled');\r\n                } else {\r\n                    input.disabled = true;\r\n                    input.parentNode.classList.add('disabled');\r\n                }\r\n            });\r\n\r\n            Array.prototype.forEach.call(this.inputs.offset, function(input) {\r\n\r\n                if (options.offset.filter(function(o) { return o == input.value }).length) {\r\n                    input.disabled = false;\r\n                    input.parentNode.classList.remove('disabled');\r\n\r\n                } else {\r\n                    input.disabled = true;\r\n                    input.parentNode.classList.add('disabled');\r\n                }\r\n\r\n            }.bind(this));\r\n\r\n        };\r\n\r\n        this.setDefaultOffset = function(renderer) {\r\n\r\n            var options = this.rendererOptions[renderer];\r\n\r\n            if (options.defaults && options.defaults.offset) {\r\n\r\n                Array.prototype.forEach.call(this.inputs.offset, function(input) {\r\n                    if (input.value == options.defaults.offset) {\r\n                        input.checked = true;\r\n                    } else {\r\n                        input.checked = false;\r\n                    }\r\n\r\n                }.bind(this));\r\n            }\r\n        };\r\n\r\n        this.rendererOptions = {\r\n\r\n            area: {\r\n                interpolation: true,\r\n                offset: ['zero', 'wiggle', 'expand', 'value'],\r\n                defaults: { offset: 'zero' }\r\n            },\r\n            line: {\r\n                interpolation: true,\r\n                offset: ['expand', 'value'],\r\n                defaults: { offset: 'value' }\r\n            },\r\n            bar: {\r\n                interpolation: false,\r\n                offset: ['zero', 'wiggle', 'expand', 'value'],\r\n                defaults: { offset: 'zero' }\r\n            },\r\n            scatterplot: {\r\n                interpolation: false,\r\n                offset: ['value'],\r\n                defaults: { offset: 'value' }\r\n            }\r\n        };\r\n\r\n        this.initialize();\r\n    };\r\n\r\n\r\n\r\n    // set up our data series with 150 random data points\r\n\r\n    var seriesData = [\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        [],\r\n        []\r\n    ];\r\n    var random = new Rickshaw.Fixtures.RandomData(150);\r\n\r\n    for (var i = 0; i < 150; i++) {\r\n        random.addData(seriesData);\r\n    }\r\n\r\n    var palette = new Rickshaw.Color.Palette({ scheme: 'classic9' });\r\n\r\n    // instantiate our graph!\r\n\r\n    var graph = new Rickshaw.Graph({\r\n        element: document.getElementById(\"chart\"),\r\n        width: 900,\r\n        height: 500,\r\n        renderer: 'area',\r\n        stroke: true,\r\n        preserve: true,\r\n        series: [{\r\n            color: palette.color(),\r\n            data: seriesData[0],\r\n            name: 'Moscow'\r\n        }, {\r\n            color: palette.color(),\r\n            data: seriesData[1],\r\n            name: 'Shanghai'\r\n        }, {\r\n            color: palette.color(),\r\n            data: seriesData[2],\r\n            name: 'Amsterdam'\r\n        }, {\r\n            color: palette.color(),\r\n            data: seriesData[3],\r\n            name: 'Paris'\r\n        }, {\r\n            color: palette.color(),\r\n            data: seriesData[4],\r\n            name: 'Tokyo'\r\n        }, {\r\n            color: palette.color(),\r\n            data: seriesData[5],\r\n            name: 'London'\r\n        }, {\r\n            color: palette.color(),\r\n            data: seriesData[6],\r\n            name: 'New York'\r\n        }]\r\n    });\r\n\r\n    graph.render();\r\n\r\n    var preview = new Rickshaw.Graph.RangeSlider.Preview({\r\n        graph: graph,\r\n        element: document.getElementById('preview'),\r\n    });\r\n\r\n    var hoverDetail = new Rickshaw.Graph.HoverDetail({\r\n        graph: graph,\r\n        xFormatter: function(x) {\r\n            return new Date(x * 1000).toString();\r\n        }\r\n    });\r\n\r\n    var annotator = new Rickshaw.Graph.Annotate({\r\n        graph: graph,\r\n        element: document.getElementById('timeline')\r\n    });\r\n\r\n    var legend = new Rickshaw.Graph.Legend({\r\n        graph: graph,\r\n        element: document.getElementById('legend')\r\n\r\n    });\r\n\r\n    var shelving = new Rickshaw.Graph.Behavior.Series.Toggle({\r\n        graph: graph,\r\n        legend: legend\r\n    });\r\n\r\n    var order = new Rickshaw.Graph.Behavior.Series.Order({\r\n        graph: graph,\r\n        legend: legend\r\n    });\r\n\r\n    var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight({\r\n        graph: graph,\r\n        legend: legend\r\n    });\r\n\r\n    var smoother = new Rickshaw.Graph.Smoother({\r\n        graph: graph,\r\n        element: document.querySelector('#smoother')\r\n    });\r\n\r\n    var ticksTreatment = 'glow';\r\n\r\n    var xAxis = new Rickshaw.Graph.Axis.Time({\r\n        graph: graph,\r\n        ticksTreatment: ticksTreatment,\r\n        timeFixture: new Rickshaw.Fixtures.Time.Local()\r\n    });\r\n\r\n    xAxis.render();\r\n\r\n    var yAxis = new Rickshaw.Graph.Axis.Y({\r\n        graph: graph,\r\n        tickFormat: Rickshaw.Fixtures.Number.formatKMBT,\r\n        ticksTreatment: ticksTreatment\r\n    });\r\n\r\n    yAxis.render();\r\n\r\n\r\n    var controls = new RenderControls({\r\n        element: document.querySelector('form'),\r\n        graph: graph\r\n    });\r\n\r\n    // add some data every so often\r\n\r\n    var messages = [\r\n        \"Changed home page welcome message\",\r\n        \"Minified JS and CSS\",\r\n        \"Changed button color from blue to green\",\r\n        \"Refactored SQL query to use indexed columns\",\r\n        \"Added additional logging for debugging\",\r\n        \"Fixed typo\",\r\n        \"Rewrite conditional logic for clarity\",\r\n        \"Added documentation for new methods\"\r\n    ];\r\n\r\n    setInterval(function() {\r\n        random.removeData(seriesData);\r\n        random.addData(seriesData);\r\n        graph.update();\r\n\r\n    }, 3000);\r\n\r\n    function addAnnotation(force) {\r\n        if (messages.length > 0 && (force || Math.random() >= 0.95)) {\r\n            annotator.add(seriesData[2][seriesData[2].length - 1].x, messages.shift());\r\n            annotator.update();\r\n        }\r\n    }\r\n\r\n    addAnnotation(true);\r\n    setTimeout(function() { setInterval(addAnnotation, 6000) }, 6000);\r\n\r\n    console.log(preview)\r\n    var previewXAxis = new Rickshaw.Graph.Axis.Time({\r\n        graph: preview.previews[0],\r\n        timeFixture: new Rickshaw.Fixtures.Time.Local(),\r\n        ticksTreatment: ticksTreatment\r\n    });\r\n\r\n    previewXAxis.render();\r\n});"]}}]