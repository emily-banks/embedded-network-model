# TOU Tariffs ---------------
            # The TOU tariffs will be applied by using if statements to determine whether peak/shoulder/off-peak
            if retail_tariff_type == 'Seasonal TOU':
                peak_charge, shoulder_charge, offpeak_charge, peak_start_time, peak_end_time, peak_start_time_2, peak_end_time_2, shoulder_start_time, shoulder_end_time, shoulder_start_time_2, shoulder_end_time_2, tou_weekday_only_flag, peak_start_time_summer, peak_end_time_summer, peak_start_time_2_summer, peak_end_time_2_summer, shoulder_start_time_summer, shoulder_end_time_summer, shoulder_start_time_2_summer, shoulder_end_time_2_summer, peak_start_time_autsp, peak_end_time_autsp, peak_start_time_2_autsp, peak_end_time_2_autsp, shoulder_start_time_autsp, shoulder_end_time_autsp, shoulder_start_time_2_ausp, shoulder_end_time_2_autsp = my_tariffs.get_variable_tariff(time,retail_tariff_type)

                if (date.month >=6 and date.month <=8):      #it's winter
                    # If the TOU periods apply all days and not just weekdays then the flag will be zero
                    if tou_weekday_only_flag == 0 :
                        # Check for whether it's a peak time
                        if (time.hour >= peak_start_time and time.hour < peak_end_time) or (time.hour >= peak_start_time_2 and time.hour < peak_end_time_2) :
                            variable_tariff = peak_charge
                        # If not, check whether it's shoulder time
                        elif (time.hour >= shoulder_start_time and time.hour < shoulder_end_time) or (time.hour >= shoulder_start_time_2 and time.hour < shoulder_end_time_2) :
                            variable_tariff = shoulder_charge
                        else:
                            variable_tariff = offpeak_charge

                    # In the case where PEAK TOU periods only apply on weekdays then check for weekdays and apply the same logic as above.
                    elif tou_weekday_only_flag == 1 and (time.weekday() >= 0 and time.weekday() <=4) :
                        if (time.hour >= peak_start_time and time.hour < peak_end_time) or (time.hour >= peak_start_time_2 and time.hour < peak_end_time_2) :
                            variable_tariff = peak_charge
                        elif (time.hour >= shoulder_start_time and time.hour < shoulder_end_time) or (time.hour >= shoulder_start_time_2 and time.hour < shoulder_end_time_2) :
                            variable_tariff = shoulder_charge
                        else:
                            variable_tariff = offpeak_charge

                    # Else assume it's the weekend
                    else:
                        if (time.hour >= shoulder_start_time and time.hour < shoulder_end_time_2) :
                            variable_tariff = shoulder_charge
                        else:
                            variable_tariff = offpeak_charge

                elif (date.month >=1 and date.month <=3) or (date.month >=11 and date.moth <=12):   #it's summer
                    # If the TOU periods apply all days and not just weekdays then the flag will be zero
                    if tou_weekday_only_flag == 0 :
                        # Check for whether it's a peak time
                        if (time.hour >= peak_start_time_summer and time.hour < peak_end_time_summer) or (time.hour >= peak_start_time_2_summer and time.hour < peak_end_time_2_summer) :
                            variable_tariff = peak_charge
                        # If not, check whether it's shoulder time
                        elif (time.hour >= shoulder_start_time_summer and time.hour < shoulder_end_time_summer) or (time.hour >= shoulder_start_time_2_summer and time.hour < shoulder_end_time_2_summer) :
                            variable_tariff = shoulder_charge
                        else:
                            variable_tariff = offpeak_charge

                    # In the case where PEAK TOU periods only apply on weekdays then check for weekdays and apply the same logic as above.
                    elif tou_weekday_only_flag == 1 and (time.weekday() >= 0 and time.weekday() <=4) :
                        if (time.hour >= peak_start_time_summer and time.hour < peak_end_time_summer) or (time.hour >= peak_start_time_2_summer and time.hour < peak_end_time_2_summer) :
                            variable_tariff = peak_charge
                        elif (time.hour >= shoulder_start_time_summer and time.hour < shoulder_end_time_summer) or (time.hour >= shoulder_start_time_2_summer and time.hour < shoulder_end_time_2_summer) :
                            variable_tariff = shoulder_charge
                        else:
                            variable_tariff = offpeak_charge

                    # Else assume it's the weekend
                    else:
                        if (time.hour >= shoulder_start_time_summer and time.hour < shoulder_end_time_2_summer) :
                            variable_tariff = shoulder_charge
                        else:
                            variable_tariff = offpeak_charge         

                 elif (date.month >=4 and date.month <=5) or (date.month >=9 and date.moth <=10):   #it's autumn or spring
                    
                        # If not, check whether it's shoulder time
                    if (time.hour >= shoulder_start_time_autsp and time.hour < shoulder_end_time_autsp) or (time.hour >= shoulder_start_time_2_autsp and time.hour < shoulder_end_time_2_autsp) :
                        variable_tariff = shoulder_charge
                    else:
                        variable_tariff = offpeak_charge


                # Apply the tariff
                results.set_participant_variable_charge(time, p.get_id(),variable_tariff * external_grid_import )

                # Controlled Load and Flat Tariffs ---------------
                # The controlled load tariffs and the flat tariff will be applied simply as the tariff times by the volume of electricity consumed, so the same calculation is applied.
            if retail_tariff_type == 'Controlled Load 1' or retail_tariff_type == 'Controlled Load 2' or retail_tariff_type == 'flat_charge':
                variable_tariff = my_tariffs.get_variable_tariff(time, retail_tariff_type)
                results.set_participant_variable_charge(time, p.get_id(),variable_tariff * external_grid_import )
            
            # Total bill

            participant_variable_charge = results.get_participant_variable_charge(time, p.get_id())
            local_solar_import_charge = results.get_local_solar_import_charge(time, p.get_id())
            central_batt_import_charge = results.get_central_batt_import_charge(time, p.get_id())
            local_solar_sales_revenue = results.get_local_solar_sales_revenue(time, p.get_id())
            central_batt_solar_sales_revenue = results.get_central_batt_solar_sales_revenue(time, p.get_id())
            export_to_grid_solar_sales_revenue = results.get_export_to_grid_solar_sales_revenue(time, p.get_id())
            fixed_charge = results.get_fixed_charge(time, p.get_id())

            # Add charges and subtract revenue for total bill
            total_bill = participant_variable_charge + local_solar_import_charge + central_batt_import_charge + fixed_charge - local_solar_sales_revenue - central_batt_solar_sales_revenue - export_to_grid_solar_sales_revenue 
            results.set_total_participant_bill(time, p.get_id(), total_bill)
